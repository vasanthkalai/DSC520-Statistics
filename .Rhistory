2+3
x<-10:1
x
y<--4:5
y
q <- c("Hockey", "Football", "Baseball", "Curling", "Rugby","Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
theDF<-data.frame(x,y,z)
theDF<-data.frame(x,y,q)
tehDF
theDF
rownames(theDF)
rownames(theDF) <- c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten")
theDF
theDF$q
newFactor <-factor(c("Pennsylvania", "New York", "New Jersey","New York", "Tennessee","Massachusetts","Pennsylvania", "New York"))
model.matrix(~ newFactor - 1)
list5 <- list(theDF, 1:10)
list5
theURL<-"C:\Users\vasan\Desktop\Skillset.csv"
theURL<-"C:\\Users\vasan\Desktop\Skillset.csv"
theURL<-"C:\\Users\\vasan\\Desktop\\Skillset.csv"
tomato<-read.table(file=theURL,header=TRUE,sep = ",")
head(tomato)
x<-10:1
y<--4:5
"Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
"Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
q <-c("Hockey", "Football", "Baseball", "Curling", "Rugby","Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
theDF <-data.frame(First=x, Second=y, Sport=q, stringsAsFactors=FALSE)
theDF$Sport
library(XML)
library(HTML)
library(jsonlite)
library(DBI)
## Create a database connection to `data/tidynomicon/example.db` using the dbConnect() function
## The first argument is the database driver which in this case is `RSQLite::SQLite()`
## The second argument is the path to the database file
## Assign the connection to `db` variable
db <- dbConnect(RSQLite::SQLite(),"data/tidynomicon/example.db")
library(RSQLite)
install.packages("RSQLite")
library(DBI)
install.packages("RSQLite")
library(DBI)
install.packages("RSQLite")
"Hello Malar!!"
"Hello Malar!!"
"Hello Malar!!"
"Hello Malar!!"
mydata<-read.csv(file.choose())
mydata<-read.csv(file.choose())
mydata<-read.csv(file.choose())
install.packages("ggplot2")
library(ggplot2)
ggplot(data=mydata,aes(x=carat,y=price))+geom_point()
ggplot(data=mydata,aes(x=carat,y=price,color=clarity))+geom_point()
ggplot(data=mydata,aes(x=carat,y=price,color=clarity))+geom_point(alpha=0.1)
ggplot(data=mydata[mydata$carat<2.5],aes(x=carat,y=price,color=clarity))+geom_point(alpha=0.1)
ggplot(data=mydata[mydata$carat<2.5,],aes(x=carat,y=price,color=clarity))+geom_point(alpha=0.1)
ggplot(data=mydata[mydata$carat<2.5,],aes(x=carat,y=price,color=clarity))+geom_point(alpha=0.1)+geom_smooth()
data(diamonds)
head(diamonds)
hist(diamonds$carat,main="Carat Histogram",xlab="Carat")
plot(price ~ carat,data=diamonds)
plot(diamonds$carat,diamonds$price)
boxplot(diamonds$carat)
ggplot(data=diamonds)+geom_histogram(aes(x=carat))
ggplot(data=diamonds)+geom_histogram(aes(x=carat),fill="grey50")
ggplot(data=diamonds)+geom_density(aes(x=carat),fill="grey50")
ggplot(diamonds,aes(x=carat,y=price))+geom_point()
g<-ggplot(diamonds,aes(x=carat,y=price))
g
g+geom_point(aes(color=color))
g+geom_point(aes(color=color))+facet_wrap(~color)
g+geom_point(aes(color=color))+facet_grid(cut~clarity)
ggplot(diamonds,aes(y=carat,x=1))+geom_boxplot()
ggplot(diamonds, aes(y=carat, x=cut)) + geom_boxplot()
ggplot(diamonds, aes(y=carat, x=cut)) + geom_violin()
ggplot(economics, aes(x=date, y=pop)) + geom_line()
library(lubridate)
install.packages("lubridate")
library(lubridate)
economics$year<-year(economics$date)
economics$month<-month(economics$date,label=TRUE)
econ2000 <- economics[which(economics$year >= 2000), ]
library(scales)
g <- ggplot(econ2000, aes(x=month, y=pop))
g <- g + geom_line(aes(color=factor(year), group=year))
g <- g + scale_color_discrete(name="Year")
g <- g + scale_y_continuous(labels=comma)
g <- g + labs(title="Population Growth", x="Month", y="Population")
g
x<-2
x<-2L
x
typeof(x)
y<-2.5
y
typeof(y)
x<-2
x
typeof(x)
x<-2L
x
typeof(x)
y<-2.5
y
typeof(y)
z<-3+2i
z
typeof(z)
a<-"M"
typeof(a)
q1<-TRUE
typeof(q1)
q2<-F
typeof(q2)
## Load the ggplot2 package
library(ggplot2)
theme_set(theme_minimal())
## Set the working directory to the root of your DSC 520 directory
setwd("E:/Repos/StatisticsR/DSC520-Statistics/")
## Load the `data/r4ds/heights.csv` to
heights_df <- read.csv("data/r4ds/heights.csv")
View(diamonds)
# https://ggplot2.tidyverse.org/reference/geom_point.html
## Using `geom_point()` create three scatterplots for diamonds,aes(x=carat,y=price))+geom_point()
## `height` vs. `earn`
ggplot(heights_df, aes(x=height, y=earn)) + geom_point()
## `age` vs. `earn`
ggplot(heights_df, aes(x=age, y=earn)) + geon_point()
## `age` vs. `earn`
ggplot(heights_df, aes(x=age, y=earn)) + geom_point()
## `ed` vs. `earn`
ggplot(heights_df, aes(x=ed, y=earn)) + geom_point
## `ed` vs. `earn`
ggplot(heights_df, aes(x=ed, y=earn)) + geom_point()
## Re-create the three scatterplots and add a regression trend line using
## the `geom_smooth()` function
## `height` vs. `earn`
ggplot(heights_df, aes(x=height, y=earn)) + geom_point() + geom_smooth()
## Re-create the three scatterplots and add a regression trend line using
## the `geom_smooth()` function
## `height` vs. `earn`
ggplot(heights_df, aes(x=height, y=earn)) + geom_point(alpha=0.1) + geom_smooth()
## Re-create the three scatterplots and add a regression trend line using
## the `geom_smooth()` function
## `height` vs. `earn`
ggplot(heights_df, aes(x=height, y=earn)) + geom_point() + geom_smooth(method="gam")
## Re-create the three scatterplots and add a regression trend line using
## the `geom_smooth()` function
## `height` vs. `earn`
ggplot(heights_df, aes(x=height, y=earn)) + geom_point() + geom_smooth(method="gam",se=FALSE)
## Re-create the three scatterplots and add a regression trend line using
## the `geom_smooth()` function
## `height` vs. `earn`
ggplot(heights_df, aes(x=height, y=earn)) + geom_point() + geom_smooth(method="gam",y ~ s(x, bs = "cs"))
## Re-create the three scatterplots and add a regression trend line using
## the `geom_smooth()` function
## `height` vs. `earn`
ggplot(heights_df, aes(x=height, y=earn)) + geom_point() + geom_smooth(method="gam")
## Re-create the three scatterplots and add a regression trend line using
## the `geom_smooth()` function
## `height` vs. `earn`
ggplot(heights_df, aes(x=height, y=earn)) + geom_point() + geom_smooth(method="gam",formula=y~s(x,bs="cs"))
## `age` vs. `earn`
ggplot(heights_df, aes(x=age, y=earn)) + geom_point() + geom_smooth(method = "gam",formula = y~s(x,bs="cs"))
## `ed` vs. `earn`
ggplot(heights_df, aes(x=ed, y=earn)) + geom_point() + geom_smooth(method = "gam",formula = y~s(x,bs="cs"))
## Create a scatterplot of `height`` vs. `earn`.  Use `sex` as the `col` (color) attribute
ggplot(heights_df, aes(x=height, y=earn, col=clarity)) + geom_point(aes(color=color))
## Create a scatterplot of `height`` vs. `earn`.  Use `sex` as the `col` (color) attribute
ggplot(heights_df, aes(x=height, y=earn, color=clarity)) + geom_point(aes(color=color))
## Create a scatterplot of `height`` vs. `earn`.  Use `sex` as the `col` (color) attribute
ggplot(heights_df, aes(x=height, y=earn, color=clarity)) #+ geom_point(aes(color=color))
## Create a scatterplot of `height`` vs. `earn`.  Use `sex` as the `col` (color) attribute
ggplot(heights_df, aes(x=height, y=earn, col=clarity)) #+ geom_point(aes(color=color))
## Create a scatterplot of `height`` vs. `earn`.  Use `sex` as the `col` (color) attribute
ggplot(heights_df, aes(x=height, y=earn, col=green)) #+ geom_point(aes(color=color))
## Create a scatterplot of `height`` vs. `earn`.  Use `sex` as the `col` (color) attribute
ggplot(heights_df, aes(x=height, y=earn, col=sex)) #+ geom_point(aes(color=color))
## Create a scatterplot of `height`` vs. `earn`.  Use `sex` as the `col` (color) attribute
ggplot(heights_df, aes(x=height, y=earn, col=sex)) + geom_point(aes(color=color))
## Create a scatterplot of `height`` vs. `earn`.  Use `sex` as the `col` (color) attribute
ggplot(heights_df, aes(x=height, y=earn, col=sex)) + geom_point()
## Using `ggtitle()`, `xlab()`, and `ylab()` to add a title, x label, and y label to the previous plot
## Title: Height vs. Earnings
## X label: Height (Inches)
## Y Label: Earnings (Dollars)
ggplot(heights_df, aes(x=height, y=earn, col=sex)) + geom_point() + xlab("Height (Inches)") + ylab("Earnings (Dollars)") + ggtitle("Height vs. Earnings")
# https://ggplot2.tidyverse.org/reference/geom_histogram.html
## Create a histogram of the `earn` variable using `geom_histogram()`
ggplot(heights_df, aes(earn)) + geom_histogram()
# https://ggplot2.tidyverse.org/reference/geom_histogram.html
## Create a histogram of the `earn` variable using `geom_histogram()`
ggplot(heights_df, aes(earn)) + geom_histogram(fill="grey50")
# https://ggplot2.tidyverse.org/reference/geom_histogram.html
## Create a histogram of the `earn` variable using `geom_histogram()`
ggplot(heights_df, aes(earn)) + geom_histogram()
## Create a histogram of the `earn` variable using `geom_histogram()`
## Use 10 bins
ggplot(heights_df, aes(earn)) + geom_histogram(bin=10)
# https://ggplot2.tidyverse.org/reference/geom_histogram.html
## Create a histogram of the `earn` variable using `geom_histogram()`
ggplot(heights_df, aes(earn)) + geom_histogram()
# https://ggplot2.tidyverse.org/reference/geom_histogram.html
## Create a histogram of the `earn` variable using `geom_histogram()`
ggplot(heights_df, aes(earn)) + geom_histogram(binwidth=30)
# https://ggplot2.tidyverse.org/reference/geom_histogram.html
## Create a histogram of the `earn` variable using `geom_histogram()`
ggplot(heights_df, aes(earn)) + geom_histogram()
## Create a histogram of the `earn` variable using `geom_histogram()`
## Use 10 bins
ggplot(heights_df, aes(earn)) + geom_histogram(bin=10)
## Create a histogram of the `earn` variable using `geom_histogram()`
## Use 10 bins
ggplot(heights_df, aes(earn)) + geom_histogram(binwidth=10)
# https://ggplot2.tidyverse.org/reference/geom_density.html
## Create a kernel density plot of `earn` using `geom_density()`
ggplot(heights_df, aes(earn)) +  geom_density()
