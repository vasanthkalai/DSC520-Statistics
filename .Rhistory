2+3
x<-10:1
x
y<--4:5
y
q <- c("Hockey", "Football", "Baseball", "Curling", "Rugby","Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
theDF<-data.frame(x,y,z)
theDF<-data.frame(x,y,q)
tehDF
theDF
rownames(theDF)
rownames(theDF) <- c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten")
theDF
theDF$q
newFactor <-factor(c("Pennsylvania", "New York", "New Jersey","New York", "Tennessee","Massachusetts","Pennsylvania", "New York"))
model.matrix(~ newFactor - 1)
list5 <- list(theDF, 1:10)
list5
theURL<-"C:\Users\vasan\Desktop\Skillset.csv"
theURL<-"C:\\Users\vasan\Desktop\Skillset.csv"
theURL<-"C:\\Users\\vasan\\Desktop\\Skillset.csv"
tomato<-read.table(file=theURL,header=TRUE,sep = ",")
head(tomato)
x<-10:1
y<--4:5
"Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
"Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
q <-c("Hockey", "Football", "Baseball", "Curling", "Rugby","Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
theDF <-data.frame(First=x, Second=y, Sport=q, stringsAsFactors=FALSE)
theDF$Sport
library(XML)
library(HTML)
library(jsonlite)
library(DBI)
## Create a database connection to `data/tidynomicon/example.db` using the dbConnect() function
## The first argument is the database driver which in this case is `RSQLite::SQLite()`
## The second argument is the path to the database file
## Assign the connection to `db` variable
db <- dbConnect(RSQLite::SQLite(),"data/tidynomicon/example.db")
library(RSQLite)
install.packages("RSQLite")
library(DBI)
install.packages("RSQLite")
library(DBI)
install.packages("RSQLite")
install.packages("RSQLite")
library(RSQLite)
## Create a database connection to `data/tidynomicon/example.db` using the dbConnect() function
## The first argument is the database driver which in this case is `RSQLite::SQLite()`
## The second argument is the path to the database file
## Assign the connection to `db` variable
db <- dbConnect(RSQLite::SQLite(),"data/tidynomicon/example.db")
library(DBI)
## Create a database connection to `data/tidynomicon/example.db` using the dbConnect() function
## The first argument is the database driver which in this case is `RSQLite::SQLite()`
## The second argument is the path to the database file
## Assign the connection to `db` variable
db <- dbConnect(RSQLite::SQLite(),"data/tidynomicon/example.db")
## If the current directory does not contain the `data` directory, set the
## working directory to project root folder (the folder should contain the `data` directory
## Use `setwd()` if needed
setwd("E:/Repos/StatisticsR/DSC520-Statistics/")
## Create a database connection to `data/tidynomicon/example.db` using the dbConnect() function
## The first argument is the database driver which in this case is `RSQLite::SQLite()`
## The second argument is the path to the database file
## Assign the connection to `db` variable
db <- dbConnect(RSQLite::SQLite(),"data/tidynomicon/example.db")
## Query the Person table using the `dbGetQuery` function and the
## `SELECT * FROM PERSON;` SQL statement
## Assign the result to the `person_df` variable
## Use `head()` to look at the first few rows of the `person_df` dataframe
person_df <- dbGetQuery(db,"SELECT * FROM PERSON;")
head(person_df,5)
## List the tables using the `dbListTables()` function
## Assign the result to the `table_names` variable
table_names <- dbListTables(person_df)
## List the tables using the `dbListTables()` function
## Assign the result to the `table_names` variable
table_names <- dbListTables(db,person_df)
table_names
## Read all of the tables at once using the `lapply` function and assign the result to the `tables` variable
## Use `table_names`, `dbReadTable`, and `conn = db` as arguments
## Print out the tables
tables <- lapply(table_names,db)
## Read all of the tables at once using the `lapply` function and assign the result to the `tables` variable
## Use `table_names`, `dbReadTable`, and `conn = db` as arguments
## Print out the tables
tables <- lapply(table_names,db)
## Create a database connection to `data/tidynomicon/example.db` using the dbConnect() function
## The first argument is the database driver which in this case is `RSQLite::SQLite()`
## The second argument is the path to the database file
## Assign the connection to `db` variable
db <- dbConnect(RSQLite::SQLite(),"data/tidynomicon/example.db")
## Query the Person table using the `dbGetQuery` function and the
## `SELECT * FROM PERSON;` SQL statement
## Assign the result to the `person_df` variable
## Use `head()` to look at the first few rows of the `person_df` dataframe
person_df <- dbGetQuery(db,"SELECT * FROM PERSON;")
head(person_df,5)
## List the tables using the `dbListTables()` function
## Assign the result to the `table_names` variable
table_names <- dbListTables(db,person_df)
## Read all of the tables at once using the `lapply` function and assign the result to the `tables` variable
## Use `table_names`, `dbReadTable`, and `conn = db` as arguments
## Print out the tables
tables <- lapply(table_names,db)
## Read all of the tables at once using the `lapply` function and assign the result to the `tables` variable
## Use `table_names`, `dbReadTable`, and `conn = db` as arguments
## Print out the tables
tables <- lapply(table_names,person_df)
## Read all of the tables at once using the `lapply` function and assign the result to the `tables` variable
## Use `table_names`, `dbReadTable`, and `conn = db` as arguments
## Print out the tables
tables <- lapply(table_names,mode="function",db)
## Read all of the tables at once using the `lapply` function and assign the result to the `tables` variable
## Use `table_names`, `dbReadTable`, and `conn = db` as arguments
## Print out the tables
tables <- lapply(table_names,mode="function")
## Read all of the tables at once using the `lapply` function and assign the result to the `tables` variable
## Use `table_names`, `dbReadTable`, and `conn = db` as arguments
## Print out the tables
tables <- lapply(table_names,dbReadTable,db)
## Read all of the tables at once using the `lapply` function and assign the result to the `tables` variable
## Use `table_names`, `dbReadTable`, and `conn = db` as arguments
## Print out the tables
tables <- lapply(conn=db,FUN=dbReadTable,table_names)
## Read all of the tables at once using the `lapply` function and assign the result to the `tables` variable
## Use `table_names`, `dbReadTable`, and `conn = db` as arguments
## Print out the tables
tables <- lapply(table_names,conn=db,FUN=dbReadTable)
tables
## Use the `dbDisconnect` function to disconnect from the database
dbDisconnect(db)
## Import the `jsonlite` library
library(jsonlite)
## Import the `jsonlite` library
install.packages("jsonlite")
library(jsonlite)
## Convert the scores_df dataframe to JSON using the `toJSON()` function
toJSON(scores_df)
## Read the file `data/scores.csv` to `scores_df`
## Display summary statistics using the `summary()` function
scores_df <- read.csv("data/scores.csv")
## Convert the scores_df dataframe to JSON using the `toJSON()` function
toJSON(scores_df)
## Convert the scores dataframe to JSON using the `toJSON()` function with the `pretty=TRUE` option
toJSON(scires_df,pretty = TRUE)
## Convert the scores dataframe to JSON using the `toJSON()` function with the `pretty=TRUE` option
toJSON(scores_df,pretty = TRUE)
